generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  email        String     @unique
  credits      Int        @default(5)
  isFreeCredit Boolean    @default(true)
  tweets       Tweets[]
  invitedBy    String?
  invite       Invite?
  payments     Payments[]
  posts        Posts[]
  comments     Comments[]

  // DATA FOR MODEL SHARING:
  pictureUrl String? @unique
  username   String  @default("Anonymous User")
  arobase    String  @default(cuid())
}

enum Emotion {
  DEFAULT
  ENTHUSIASM
  MELANCHOLY
  JOY
  ANXIETY
  CONFIDENCE
  WONDER
  ANGER
  COMPASSION
  EXHAUSTION
  CRITICAL_THINKING
}

enum Style {
  DEFAULT
  INFORMATIVE
  POETIC
  HUMOROUS
  FORMAL
  PERSUASIVE
  DESCRIPTIVE
  SCIENTIFIC
  NARRATIVE
  EDUCATIONAL
}

enum Tone {
  DEFAULT
  OPTIMISTIC
  IRONIC
  AUTHORITATIVE
  EMPHATIC
  DETACHED
  SATIRICAL
  REFLECTIVE
  INTIMATE
  ENGAGED
  POSITIVE
}

enum Target {
  ALL
  ENTERPRISES
  PROFESSIONALS
  PARTICULARS
  ENTREPRENEURS
  STUDENTS
  CHILDREN
  TEENAGERS
  ADULTS
  SENIORS
  PARENTS
}

enum Lang {
  id
  da
  de
  en_GB
  en_US
  es_ES
  fr
  hr
  it
  lt
  hu
  nl
  no
  pl
  pt_BR
  ro
  fi
  sv_SE
  vi
  tr
  cs
  el
  bg
  ru
  uk
  hi
  th
  zh_CN
  ja
  zh_TW
  ko
  ar
}

enum TWEEETS_VERSION_GENERATED {
  V1
  V2
}

model Tweets {
  id                 String                    @id @default(cuid())
  user               User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @default(now()) @updatedAt
  context            String                    @default("")
  generated          String                    @default("")
  emotion            Emotion                   @default(DEFAULT)
  style              Style                     @default(DEFAULT)
  tone               Tone                      @default(DEFAULT)
  target             Target                    @default(ALL)
  lang               Lang                      @default(en_US)
  gpt                Int                       @default(3)
  isShared           Boolean                   @default(false)
  sharedTemplateSlug String?                   @unique
  v                  TWEEETS_VERSION_GENERATED @default(V1)
}

model Invite {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  email      String   @unique
  used       Int      @default(0)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  views      Int      @default(0)
  isVerified Boolean  @default(false)
}

enum PAYMENT_STATUS {
  PENDING
  COMPLETED
  FAILED
}

model Payments {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  amount      Int
  referenceId String?        @unique
  currency    String
  status      PAYMENT_STATUS @default(PENDING)
  email       String?
  invoiceUrl  String?
}

// 
// BLOG
//

enum POST_RELEASE_STATUS {
  DRAFT
  PUBLISHED
  UNPUBLISHED
  TRASHED
  ARCHIVED
}

model Tags {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name      String   @unique
  slug      String   @unique
  posts     Posts[]
}

model Categories {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name      String   @unique
  slug      String   @unique
  posts     Posts[]
}

model Comments {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
}

model Posts {
  id          String              @id @default(cuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now()) @updatedAt
  title       String
  slug        String              @unique
  content     String
  excerpt     String
  status      POST_RELEASE_STATUS @default(DRAFT)
  author      User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  publishedAt DateTime?
  tags        Tags[]
  categories  Categories[]
  comments    Comments[]
  views       Int                 @default(0)
  coverUrl    String?             @default("https://media.discordapp.net/attachments/580083630995537961/1155988371018096761/Group_75_1_2.png")
  variants    PostVariants[]
  lang        Lang                @default(en_US)

  // Settings
  isCommentsEnabled Boolean @default(true)
  isPublic          Boolean @default(true) // if false, only logged in users can see it
  isPinned          Boolean @default(false)
}

model PostVariants {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  original   Posts    @relation(fields: [originalId], references: [id], onDelete: Cascade)
  originalId String
  lang       Lang     @default(fr)
  title      String
  excerpt    String
  content    String
}
